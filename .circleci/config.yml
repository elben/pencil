version: 2

# Also based off: https://github.com/johnae/circleci-nix

references:
  prepare_ci: &prepare_container
    run:
      name: Prepare Container
      command: |
        nix-channel --add \
        https://nixos.org/channels/nixpkgs-unstable nixpkgs && \
        nix-channel --update
        nix-env -iA nixpkgs.haskellPackages.cabal-install
        nix-env -iA nixpkgs.haskellPackages.doctest

jobs:
  build:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/#buildpack-deps
      # https://hub.docker.com/r/circleci/buildpack-deps/tags/

      # https://github.com/nix-community/docker-nix
      - image: nixorg/nix:circleci
    steps:
      - checkout

      - *prepare_container

      - restore_cache:
          keys:
            - v1-pencil-{{ .Branch }}-{{ .Revision }}
            - v1-pencil-{{ .Branch }}-
            - v1-pencil-

      - run:
          name: Restore nix cache
          command: |
            for version in "8.4" "8.6"
            do
              if [ -e /nix-cache/pencil-nix-cache-ghc-${version}.nar ]; then
                echo "/nix-cache/pencil-nix-cache-ghc-${version}.nar present, importing into store."
                nix-store --import < /nix-cache/pencil-nix-cache-ghc-${version}.nar
              else
                echo "/nix-cache/pencil-nix-cache-ghc-${version}.nar missing, skipping store import."
              fi
            done

      # Get a nix-shell running, which means all the derivations worked. We do
      # this so that we can cache the nix store before running tests.

      ############# GHC 8.4 #############

      - run:
          name: Prepare nix-shell for ghc-8.4
          command: |
            nix-shell --attr env release-ghc-8.4.nix --run "echo 'Inside a nix-shell'"

      - run:
          name: Build using nix-build for ghc-8.4
          command: |
            nix-build --attr env --out-link pencil-result-ghc-8.2 release-ghc-8.4.nix

      # Use the derivate built by nix-build, above, which $out points to
      - run:
          name: Create nix cache for ghc-8.4
          command: |
            nix-shell --attr env release-ghc-8.4.nix --run bash <<'EOF'
            set -eu -o pipefail
            mkdir -p /nix-cache
            nix-store --export $(nix-store -qR $out) > /nix-cache/pencil-nix-cache-ghc-8.4.nar
            EOF

      ############# GHC 8.6 #############

      - run:
          name: Prepare nix-shell for ghc-8.6
          command: |
            nix-shell --attr env release-ghc-8.6.nix --run "echo 'Inside a nix-shell'"

      - run:
          name: Build using nix-build for ghc-8.6
          command: |
            nix-build --attr env --out-link pencil-result-ghc-8.2 release-ghc-8.6.nix

      # Use the derivate built by nix-build, above, which $out points to
      - run:
          name: Create nix cache for ghc-8.6
          command: |
            nix-shell --attr env release-ghc-8.6.nix --run bash <<'EOF'
            set -eu -o pipefail
            mkdir -p /nix-cache
            nix-store --export $(nix-store -qR $out) > /nix-cache/pencil-nix-cache-ghc-8.6.nar
            EOF


      ##########################

      - save_cache:
          key: v1-pencil-{{ .Branch }}-{{ .Revision }}
          paths:
            - /nix-cache/pencil-nix-cache-ghc-8.4.nar
            - /nix-cache/pencil-nix-cache-ghc-8.6.nar

      - run:
          name: Run tests using ghc-8.4
          command: |
            nix-shell --attr env release-ghc-8.4.nix --run "cabal new-update && cabal new-test && doctest src/"

      - run:
          name: Run tests using ghc-8.6
          command: |
            nix-shell --attr env release-ghc-8.6.nix --run "cabal new-update && cabal new-test && doctest src/"