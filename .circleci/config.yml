version: 2

# Also based off: https://github.com/johnae/circleci-nix

references:
  prepare_ci: &prepare_container
    run:
      name: Prepare Container
      command: |
        nix-channel --add \
        https://nixos.org/channels/nixpkgs-unstable nixpkgs && \
        nix-channel --update
        nix-env -iA nixpkgs.haskellPackages.cabal-install
        nix-env -iA nixpkgs.haskellPackages.doctest

jobs:
  build:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/#buildpack-deps
      # https://hub.docker.com/r/circleci/buildpack-deps/tags/
      # - image: circleci/buildpack-deps:bionic-curl

      - image: nixorg/nix:circleci
    steps:
      - checkout

      - *prepare_container

      - restore_cache:
          keys:
            - v1-pencil-{{ .Branch }}-{{ .Revision }}
            - v1-pencil-{{ .Branch }}-
            - v1-pencil-

      - run:
          name: Restore nix cache
          command: |
            if [ -e /nix-cache/pencil-nix-cache.nar ]; then
              echo "/nix-cache/pencil-nix-cache.nar present, importing into store."
              nix-store --import < /nix-cache/pencil-nix-cache.nar
            else
              echo "/nix-cache/pencil-nix-cache.nar missing, skipping store import."
            fi

      # Get a nix-shell running, which means all the derivations worked. We do
      # this so that we can cache the nix store before running tests.

      - run:
          name: Prepare nix-shell for ghc-8.4
          command: |
            nix-shell --attr env release-ghc-8.4.nix --run "echo 'Inside a nix-shell'"

      - run:
          name: Prepare nix-shell for ghc-8.2
          command: |
            nix-shell --attr env release-ghc-8.2.nix --run "echo 'Inside a nix-shell'"

      - run:
          name: Build using nix-build
          command: |
            nix-build --attr env --out-link pencil-result-ghc-8.2 release-ghc-8.2.nix
            nix-build --attr env --out-link pencil-result-ghc-8.4 release-ghc-8.4.nix

      - run:
          name: Create nix cache
          command: |
            mkdir -p /nix-cache
            # Use the `pencil-result-*` file thats nix built in the previous step.
            nix-store --export $({ nix-store -qR pencil-result-ghc-8.2 & nix-store -qR pencil-result-ghc-8.4 }) > /nix-cache/pencil-nix-cache.nar

      - save_cache:
          key: v1-pencil-{{ .Branch }}-{{ .Revision }}
          paths:
            - /nix-cache/pencil-nix-cache.nar

      - run:
          name: Run tests using ghc-8.4
          command: |
            nix-shell --attr env release-ghc-8.4.nix --run "cabal new-update && cabal new-test && doctest src/"

      - run:
          name: Run tests using ghc-8.2
          command: |
            # Don't run doctest for now, because it's failing with this error
            # when using the ghc 8.2 setup:
            #
            # ### Failure in src/Pencil/Internal/Pencil.hs:286: expression `toExtension Markdown'
            # expected: Just "html"
            # but got: can't load .so/.DLL for: /nix/store/ymvqbs9p3m44sjrx5b05zf9yigw07297-hlibsass-0.1.6.1/lib/ghc-8.2.2/x86_64-linux-ghc-8.2.2/libHShlibsass-0.1.6.1-IUTRxGlHW62EGpAf3DeFYb-ghc8.2.2.so (/nix/store/ymvqbs9p3m44sjrx5b05zf9yigw07297-hlibsass-0.1.6.1/lib/ghc-8.2.2/x86_64-linux-ghc-8.2.2/libHShlibsass-0.1.6.1-IUTRxGlHW62EGpAf3DeFYb-ghc8.2.2.so: undefined symbol: sass_resolve_file)
            #
            nix-shell --attr env release-ghc-8.2.nix --run "cabal new-update && cabal new-test"
